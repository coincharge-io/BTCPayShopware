!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/bundles/coinchargepayment/",n(n.s="W/6q")}({"9HF9":function(e){e.exports=JSON.parse('{"coincharge-btcpay-generate-key":{"button":"Generate API key","error":"Provided url isn\'t valid"},"coincharge-btcpay-test-connection":{"success":"Connection was successfully established","error":"Connection could not be established. Please check your API credentials","button":"Test connection"},"coincharge-btcpay-create-webhook":{"button":"Create webhook","error":"Problem with creating webhook"}}')},Jkf5:function(e,t){e.exports='<div>\n\t<sw-button-process :isloading="isLoading" @click="createWebhook">{{ $tc(\'coincharge-btcpay-create-webhook.button\') }}</sw-button-process>\n</div>\n'},"W/6q":function(e,t,n){"use strict";n.r(t);var o=n("lE2+"),r=n.n(o),i=Shopware,c=i.Component,a=i.Mixin,s=i.ApiService;c.register("coincharge-btcpay-generate-key",{template:r.a,inject:[["coinchargeBtcpayApiService"]],mixins:[a.getByName("notification")],data:function(){return{isLoading:!1,apiKeyValue:{"CoinchargePayment.config.btcpayServerUrl":""}}},methods:{generate:function(){var e=s.getByName("systemConfigApiService"),t=document.getElementById("CoinchargePayment.config.btcpayServerUrl").value,n=this.removeTrailingSlash(t);this.apiKeyValue["CoinchargePayment.config.btcpayServerUrl"]=n;var o=window.location.origin+"/api/_action/coincharge/credentials";return e.saveValues(this.apiKeyValue),console.log(e.saveValues(this.apiKeyValue)),window.open(n+"/api-keys/authorize/?applicationName=CoinchargePaymentPlugin&permissions=btcpay.store.cancreateinvoice&permissions=btcpay.store.canviewinvoices&permissions=btcpay.store.webhooks.canmodifywebhooks&selectiveStores=true&redirect="+o,"_blank")},removeTrailingSlash:function(e){return e.replace(/\/$/,"")}}});var u=n("irp2"),p=n.n(u),l=Shopware,f=l.Component,h=l.Mixin;f.register("coincharge-btcpay-test-connection",{template:p.a,inject:[["coinchargeBtcpayApiService"]],mixins:[h.getByName("notification")],data:function(){return{isLoading:!1}},methods:{check:function(){var e=this;this.isLoading=!0,this.coinchargeBtcpayApiService.verifyApiKey().then((function(t){if(!1===t.success)return e.createNotificationWarning({title:"BTCPay Server",message:t.message}),void(e.isLoading=!1);e.createNotificationSuccess({title:"BTCPay Server",message:e.$tc("coincharge-btcpay-test-connection.success")}),e.isLoading=!1}))}}});var y=n("Jkf5"),b=n.n(y),g=Shopware,d=g.Component,v=g.Mixin,m=g.ApiService;function w(e){return(w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function S(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function k(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function P(e,t){return(P=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function C(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=O(e);if(t){var r=O(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return B(this,n)}}function B(e,t){if(t&&("object"===w(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function O(e){return(O=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}d.register("coincharge-btcpay-create-webhook",{template:b.a,inject:[["coinchargeBtcpayApiService"]],mixins:[v.getByName("notification")],data:function(){return{isLoading:!1,webhookValues:{"CoinchargePayment.config.btcpayWebhookSecret":"","CoinchargePayment.config.btcpayWebhookId":""}}},methods:{createWebhook:function(){var e=this;this.isLoading=!0;var t=m.getByName("systemConfigApiService");this.coinchargeBtcpayApiService.generateWebhook().then((function(n){if(!1===n.success)return e.createNotificationWarning({title:"BTCPay Server",message:n.message}),void(e.isLoading=!1);e.webhookValues["CoinchargePayment.config.btcpayWebhookSecret"]=n.message.secret,e.webhookValues["CoinchargePayment.config.btcpayWebhookId"]=n.message.id,t.saveValues(e.webhookValues),e.createNotificationSuccess({title:"BTCPay Server",message:e.$tc("coincharge-btcpay-test-connection.success")}),e.isLoading=!1}))}}});var j=Shopware.Classes.ApiService,x=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&P(e,t)}(i,e);var t,n,o,r=C(i);function i(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"coincharge";return S(this,i),r.call(this,e,t,n)}return t=i,(n=[{key:"verifyApiKey",value:function(){var e="/_action/".concat(this.getApiBasePath(),"/verify"),t=this.getBasicHeaders();return this.httpClient.get(e,{headers:t}).then((function(e){return j.handleResponse(e)}))}},{key:"generateWebhook",value:function(){var e="/_action/".concat(this.getApiBasePath(),"/webhook");return this.httpClient.post(e,{},{headers:this.getBasicHeaders()}).then((function(e){return j.handleResponse(e)})).catch((function(e){throw console.error("Webhook couldn't be created: "+e.message),e}))}}])&&k(t.prototype,n),o&&k(t,o),Object.defineProperty(t,"prototype",{writable:!1}),i}(j),A=n("9HF9"),_=n("z6Wy"),L=Shopware.Application;L.addServiceProvider("coinchargeBtcpayApiService",(function(e){var t=L.getContainer("init");return new x(t.httpClient,e.loginService)})),Shopware.Locale.extend("de-DE",A),Shopware.Locale.extend("en-GB",_)},irp2:function(e,t){e.exports='<div>\n    <sw-button-process\n        :isLoading="isLoading"\n        @click="check"\n    >{{ $tc(\'coincharge-btcpay-test-connection.button\') }}</sw-button-process>\n</div>'},"lE2+":function(e,t){e.exports='<div>\n    <sw-button-process\n        :isLoading="isLoading"\n        @click="generate"\n    >{{ $tc(\'coincharge-btcpay-generate-key.button\') }}</sw-button-process>\n</div>'},z6Wy:function(e){e.exports=JSON.parse('{"coincharge-btcpay-generate-key":{"button":"Generate API key","error":"Provided url isn\'t valid"},"coincharge-btcpay-test-connection":{"success":"Connection was successfully established","error":"Connection could not be established. Please check your API credentials","button":"Test connection"},"coincharge-btcpay-create-webhook":{"button":"Create webhook","error":"Problem with creating webhook"}}')}});